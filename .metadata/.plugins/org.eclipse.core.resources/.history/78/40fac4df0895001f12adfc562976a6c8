package multiableServerClient;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.Socket;
import java.net.SocketException;

public class ClientHandler extends Thread {
	private Socket clientSocket;
	public ClientHandler(Socket clientSocket) {
		this.clientSocket = clientSocket;
	}

	@Override
	public void run() {
		try {
			InputStream input = clientSocket.getInputStream(); // 입력스트림
			OutputStream output = clientSocket.getOutputStream(); // 출력스트림
			byte[] buffer = new byte[1024];
			int bytesRead; // 초기값 0

			while (true) {
				try {
					bytesRead = input.read(buffer); // 데이터 수신
					if(bytesRead == -1) break;
				}catch(SocketException e) { 		// 데이터 수신 중 클라이언트가 연결을 종료한 경우
					System.err.println("데이터 수신 중 연결 문제가 발생했습니다." + e.getMessage());
					break; // 반복문 종료
				}
				
				
				// 데이터 처리 및 응답 전송				
				try {
					String message = new String(buffer, 0, bytesRead);
					System.out.println("클라이언트["+clientSocket.getRemoteSocketAddress()+"]로부터 수신된 메시지 : " + message);
					output.write((message).getBytes());			// 바이트로
					output.flush();
				}catch(SocketException e) {
					System.err.println("응답데이터 전송 중 클라이언트 연결 종료)" + e.getMessage());
				}catch(IOException e) {
					System.err.println("데이터 전송 중 오류 발생)" + e.getMessage());
				}
			}
		} catch (IOException e) {
			System.err.println(" Exception!!) 소켓 처리 중에러"+ e.getMessage());
		} finally {
			try {
				if (clientSocket != null)
					clientSocket.close();
			} catch (IOException e) {
				System.err.println("소켓 종료 중 에러 발생 : " + e.getMessage());
			}
		}
	}
}
