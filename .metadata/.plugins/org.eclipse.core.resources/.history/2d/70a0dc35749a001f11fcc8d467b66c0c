package chatServer;

import java.io.*;
import java.net.*;
import java.util.*;
import java.util.concurrent.*;

public class ChatServer {
    private static final int PORT = 7798; // 포트 번호
    private static Set<PrintWriter> clientWriters = ConcurrentHashMap.newKeySet(); // 클라이언트 출력 스트림 저장

    public static void main(String[] args) {
        System.out.println("채팅 서버 시작...");
        try (ServerSocket serverSocket = new ServerSocket(PORT)) {
            while (true) {
                new ClientHandler(serverSocket.accept()).start(); // 클라이언트 연결 시 핸들러 스레드 시작
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    // 클라이언트를 처리하는 내부 클래스
    private static class ClientHandler extends Thread {
        private Socket socket;
        private PrintWriter out;
        private BufferedReader in;

        public ClientHandler(Socket socket) {
            this.socket = socket;
        }

        public void run() {
            try {
                in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
                out = new PrintWriter(socket.getOutputStream(), true);
                synchronized (clientWriters) {
                    clientWriters.add(out); // 새 클라이언트 추가
                }

                String message;
                while ((message = in.readLine()) != null) {
                    System.out.println("받은 메시지: " + message);
                    broadcast(message); // 메시지 브로드캐스트
                }
            } catch (IOException e) {
                e.printStackTrace();
            } finally {
                try {
                    socket.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
                synchronized (clientWriters) {
                    clientWriters.remove(out); // 클라이언트 제거
                }
            }
        }

        // 모든 클라이언트에게 메시지 전송
        private void broadcast(String message) {
            synchronized (clientWriters) {
                for (PrintWriter writer : clientWriters) {
                    writer.println(message);
                }
            }
        }
    }
}

