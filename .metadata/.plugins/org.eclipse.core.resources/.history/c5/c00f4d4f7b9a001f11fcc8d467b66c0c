package chatServer;

import java.io.*;
import java.net.*;
import java.util.*;
import java.util.concurrent.*;

public class ChatServer {
    private static final int PORT = 7798; // 포트 번호
    private static Set<OutputStream> clientOutputs = ConcurrentHashMap.newKeySet(); // 클라이언트 출력 스트림 저장

    public static void main(String[] args) {
        System.out.println("채팅 서버 시작...");
        try (ServerSocket serverSocket = new ServerSocket(PORT)) {
            while (true) {
                new ClientHandler(serverSocket.accept()).start(); // 클라이언트 연결 시 핸들러 스레드 시작
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    // 클라이언트를 처리하는 클래스
    private static class ClientHandler extends Thread {
        private Socket socket;
        private InputStream input;
        private OutputStream output;

        public ClientHandler(Socket socket) {
            this.socket = socket;
        }

        public void run() {
            try {
                input = socket.getInputStream();
                output = socket.getOutputStream();
                synchronized (clientOutputs) {
                    clientOutputs.add(output); // 새 클라이언트 추가
                }
                
                String message = socket.getRemoteSocketAddress() + ":" + socket.getPort()+"가 서버와 연결되었습니다.";
               
                while (true) {
                    System.out.println(socket.getRemoteSocketAddress() + ":" + socket.getPort() + "로부터\n받은 메시지: " + message);
                    broadcast(message); // 메시지를 브로드캐스트
                }
            } catch (IOException e) {
                e.printStackTrace();
            } finally {
                try {
                    socket.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
                synchronized (clientOutputs) {
                    clientOutputs.remove(output); // 클라이언트 제거
                }
            }
        }

        private String readMessage(InputStream input) {
            StringBuilder messageBuilder = new StringBuilder();
            byte[] buffer = new byte[1024]; // 버퍼
            int bytesRead;
            
            try {
                while ((bytesRead = input.read(buffer)) != -1) {
                    messageBuilder.append(new String(buffer, 0, bytesRead));
                    // 메시지가 완전한지 확인 (예: 줄바꿈 문자 확인)
                    if (messageBuilder.toString().endsWith("\n")) {
                        break; // 줄바꿈이 있으면 메시지가 끝났다고 가정
                    }
                }
            } catch (IOException e) {
                System.err.println("readMessage: " + e.getMessage());
            }
            return messageBuilder.length() > 0 ? messageBuilder.toString().trim() : null; // 메시지 반환
        }

        // 모든 클라이언트에게 메시지 전송
        private void broadcast(String message) {
            synchronized (clientOutputs) {
                for (OutputStream outputStream : clientOutputs) {
                    PrintWriter writer = new PrintWriter(outputStream, true);
                    writer.println(message);
                }
            }
        }
    }
}
