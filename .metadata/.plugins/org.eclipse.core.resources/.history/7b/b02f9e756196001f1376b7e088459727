package multiableServerClient;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.InetAddress;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.Scanner;

public class MulitableClient {
    private final String serverAddress = "192.168.30.215";
    private final int port = 12345;
    private Socket clientSocket;	// 클라이언트 소켓
    private String userInputData;

    public MulitableClient() {
        createClientSocket();
    }

    public void createClientSocket() {
        try {
            System.out.println("=== 클라이언트 실행 ===");
            System.out.println("연결 시도중... \n서버:" + serverAddress + "<===> 클라이언트:" + InetAddress.getLocalHost().getHostAddress());
            clientSocket = new Socket(serverAddress, port);
            
            // try - with - resource
            try (InputStream input = clientSocket.getInputStream();
                 OutputStream output = clientSocket.getOutputStream();
                 Scanner scanner = new Scanner(System.in);) {

                byte[] buffer = new byte[1024];
                int bytesRead;

                while (true) {
                    System.out.print("서버와 연결되었습니다. 메시지를 입력하세요 >> ");
                    userInputData = scanner.nextLine();
                    if (userInputData.equalsIgnoreCase("exit")) {
                        break;
                    }

                    output.write(userInputData.getBytes());
                    output.flush();

                    bytesRead = input.read(buffer);
                    String responseData = new String(buffer, 0, bytesRead);
                    System.out.println("서버로부터 받은 응답 : " + responseData);
                }

            } catch (IOException e) {
                System.err.println("스트림 처리 중 문제 발생: " + e.getMessage());
                e.printStackTrace();
            }
        } catch (UnknownHostException e) {
            System.err.println("네트워크 연결 문제입니다: " + e.getMessage());
            e.printStackTrace();
        } catch (IOException e) {
            System.err.println("소켓 관련 문제입니다: " + e.getMessage());
            e.printStackTrace();
        } finally {
            if (clientSocket != null && !clientSocket.isClosed()) {
                try {
                    clientSocket.close();
                } catch (IOException e) {
                    System.err.println("소켓 닫기 중 문제 발생: " + e.getMessage());
                    e.printStackTrace();
                }
            }
            System.out.println("클라이언트 종료");
        }
    }

    public static void main(String[] args) {
        new MulitableClient();
    }
}
