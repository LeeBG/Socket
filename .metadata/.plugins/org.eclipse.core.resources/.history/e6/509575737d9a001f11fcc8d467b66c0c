package chatServer;

import java.io.*;
import java.net.*;
import java.util.*;

import java.io.*;
import java.net.*;
import java.util.concurrent.*;

public class ChatServer {
    private static final int PORT = 12345; // 포트 번호
    private static ExecutorService pool = Executors.newFixedThreadPool(10); // 스레드 풀

    public static void main(String[] args) {
        try (ServerSocket serverSocket = new ServerSocket(PORT)) {
            System.out.println("서버가 시작되었습니다. 포트: " + PORT);

            while (true) {
                Socket clientSocket = serverSocket.accept(); // 클라이언트 연결 수락
                System.out.println("클라이언트 연결됨: " + clientSocket.getInetAddress());
                pool.execute(new ClientHandler(clientSocket)); // 클라이언트 핸들러 스레드 실행
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}

class ClientHandler implements Runnable {
    private Socket socket;

    public ClientHandler(Socket socket) {
        this.socket = socket;
    }

    @Override
    public void run() {
        try (InputStream inputStream = socket.getInputStream();
             OutputStream outputStream = socket.getOutputStream()) {
             
            InputStreamReader isr = new InputStreamReader(inputStream);
            BufferedReader reader = new BufferedReader(isr);
            PrintWriter writer = new PrintWriter(outputStream, true);

            String inputLine;
            while ((inputLine = reader.readLine()) != null) {
                System.out.println("클라이언트로부터 수신: " + inputLine);
                writer.println("서버 응답: " + inputLine); // 클라이언트에 응답
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                socket.close(); // 소켓 닫기
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
}
