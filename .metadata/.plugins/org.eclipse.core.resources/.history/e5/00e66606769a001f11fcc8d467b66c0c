package chatServer;

import java.io.*;
import java.net.*;
import java.util.*;
import java.util.concurrent.*;

public class ChatServer {
	private static final int PORT = 7798; // 포트 번호
	private static Set<OutputStream> clientOutputs = ConcurrentHashMap.newKeySet(); // 클라이언트 출력 스트림 저장

	public static void main(String[] args) {
		System.out.println("채팅 서버 시작...");
		try (ServerSocket serverSocket = new ServerSocket(PORT)) {
			while (true) {
				new ClientHandler(serverSocket.accept()).start(); // 클라이언트 연결 시 핸들러 스레드 시작
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	// 클라이언트를 처리하는 클래스
	private static class ClientHandler extends Thread {
		private Socket socket;
		private InputStream input;
		private OutputStream output;

		public ClientHandler(Socket socket) {
			this.socket = socket;
		}

		public void run() {
			try {
				input = socket.getInputStream();
				output = socket.getOutputStream();
				synchronized (clientOutputs) {
					clientOutputs.add(output); // 새 클라이언트 추가
				}

				String message = readMessage(input);

				while (!(message.equals(null))) {
					System.out.println(socket.getRemoteSocketAddress()e+"받은 메시지: " + message);
				}
			} catch (IOException e) {
				e.printStackTrace();
			} finally {
				try {
					socket.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
				synchronized (clientOutputs) {
					clientOutputs.remove(output); // 클라이언트 제거
				}
			}
		}

		private String readMessage(InputStream input) {
			String message = null;
			
			byte[] buffer = new byte[1024]; // 버퍼
			int bytesRead;
			try {
				bytesRead = input.read(buffer);
				if (bytesRead != -1) {
					message = new String(buffer, 0, bytesRead);
				}
			} catch (IOException e) {
				System.err.println("readMessage)" + e.getMessage());
			}
			
			return message;
		}

		// 모든 클라이언트에게 메시지 전송
		private void broadcast(String message) {
			synchronized (clientOutputs) {
				for (OutputStream outputStream : clientOutputs) {
					PrintWriter writer = new PrintWriter(outputStream, true);
					writer.println(message);
				}
			}
		}
	}
}
